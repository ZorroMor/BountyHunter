<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.test1 = "noone";
global.test2 = "noone";
global.test3 = "noone";

global.update_ship = false;

randomize();

audio_play_music(snd_background, true);

paused = false;
paused_first = false;

for (i = 0; i &lt; 15; i++)
{
    for (j = 0; j &lt; 15; j++)
    {
        global.player_part[i,j] = false;
        global.player_text[i,j] = "none";
        global.player_angle[i,j] = 0;
        global.player_controls[i,j] = "";
    }
}

global.ships[0,0] = global.player_part; //array holding all ship parts' instances
global.ships[0,1] = global.player_text; //array holding text for all parts
global.ships[0,2] = 0; //Power
global.ships[0,3] = 0; //Ammo

//place cockpit
global.player_part[7,7] = instance_create(200, 200, obj_cockpit);
global.player_part[7,7].grid_i = 7; //indicates where this part is located in the ship's grid
global.player_part[7,7].grid_j = 7; //indicates where this part is located in the ship's grid
global.player_part[7,7].ship = 0; //indicates the ship which this part is assigned to
global.player_part[7,7].player = true; //indicates the part is controlled by the player
global.player_text[7,7] = "cockpit";


//place player
instance_create(200, 200, obj_player);

//place asteroids
for (i = 0; i &lt; 10; i++)
{
    instance_create(irandom(room_width), irandom(room_height), obj_Asteroid_1);
}

//place space station
var fix, inst;
fix = physics_fixture_create();
physics_fixture_set_circle_shape(fix, sprite_get_width(spr_station)*8);
physics_fixture_set_density(fix, 0);
inst = instance_create(0, 10000, obj_station_ring);
inst.image_xscale = 16;
inst.image_yscale = 16;
physics_fixture_bind(fix, inst);
physics_fixture_delete(fix);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (os_is_paused())
{
    if (!paused)
        scr_pause(true);
}

if (!paused)
{
    if (paused_first)
    {
        paused_first = false;
    
        if (room = rm_level_1) physics_pause_enable(false);
        
        audio_resume_music();
        
        //if the ship configuration was updated while paused, update the existing ship
        if (global.update_ship)
        {
            global.update_ship = false;
            
            //pass in the player's ship's index - 0
            scr_update_ship(0);
        }
    }
    
    //if game is running, center view on player
    view_xview[0] = obj_player.x - (window_get_width() / 2);
    view_yview[0] = obj_player.y - (window_get_height() / 2);
    //keep view within the confines of the room
    if view_xview[0] &lt; 0 view_xview[0] = 0;
    if view_yview[0] &lt; 0 view_yview[0] = 0;
    if view_xview[0] &gt; (room_width - view_wport[0]) view_xview[0] = (room_width - view_wport[0]);
    if view_yview[0] &gt; (room_height - view_hport[0]) view_yview[0] = (room_height - view_hport[0]);
}

//set main view port to the screen's dimensions
view_wport[0] = window_get_width();
view_hport[0] = window_get_height();
//do not stretch the view port if the room is smaller than the screen
if view_wport[0] &gt; room_width view_wport[0] = room_width;
if view_hport[0] &gt; room_height view_hport[0] = room_height;

//display mini map if the game is running
if (room = rm_level_1)
{
view_wview[0] = window_get_width();
view_hview[0] = window_get_height();

//set mini map to 1/10 the screen size
view_wport[1] = window_get_width() * 0.1;
view_hport[1] = window_get_width() * 0.1;
//set mini map at the bottom of the screen
view_yport[1] = window_get_height() - view_hport[1];
}
else
{
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="115">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (paused)
    scr_pause(false);
else
{
    scr_pause(true);
    paused_first = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>paused = false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>703</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_score</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>view_xview[0] + (view_wport[0] / 2)</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>view_yview[0] + 20</string>
          </argument>
          <argument>
            <kind>1</kind>
            <string>Score: </string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_text(view_xview[0] + (view_wport[0] / 2), view_yview[0] + 50, global.test1);
//draw_text(view_xview[0] + (view_wport[0] / 2), view_yview[0] + 75, global.test2);
//draw_text(view_xview[0] + (view_wport[0] / 2), view_yview[0] + 100, global.test3);

if !paused
{
    draw_set_font(fnt_hud);
    
    var xx = view_xview[0];
    var yy = view_yview[0];
    var screen_width = view_wport[0];
    var screen_height = view_hport[0];
    var y_offset = yy + (screen_height * 0.015);
    var y_offset_0 = yy + (screen_height * 0.0175);
    var y_offset_1 = y_offset_0 + (screen_height * 0.02);
    var x_transform = screen_width / 3000;
    var y_transform = screen_width / 3000;
    
    //power meter
    var ship_power = global.ships[0,2];
    draw_text_transformed(xx + (screen_width * 0.01), y_offset, "Power:", x_transform, y_transform, 0);
    draw_healthbar(xx + (screen_width * 0.06), y_offset_0, xx + (screen_width * 0.11), y_offset_1, ship_power, c_dkgray, c_purple, c_blue, 0, true, true);
    draw_text_transformed(xx + (screen_width * 0.115), y_offset, string(floor(ship_power + 0.05)) + "%", x_transform, y_transform, 0);
    
    //ammo meter
    var ship_ammo = global.ships[0,3];
    draw_text_transformed(xx + (screen_width * 0.855), y_offset, "Ammo:", x_transform, y_transform, 0);
    draw_healthbar(xx + (screen_width * 0.905), y_offset_0, xx + (screen_width * 0.955), y_offset_1, ship_ammo, c_dkgray, c_red, c_yellow, 0, true, true);
    draw_text_transformed(xx + (screen_width * 0.96), y_offset, string(floor(ship_ammo + 0.5)) + "%", x_transform, y_transform, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
