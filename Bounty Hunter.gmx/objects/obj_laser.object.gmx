<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship_part</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

hp = 500;
max_hp = 500;

image_speed = 0;
image_index = 0;

snd_temp = false;
snd_hit = false;

can_shoot = true;

laser_firing = false;
hitting_target = false;

xx = x;
yy = y;
temp_x = x + (((sprite_height / 2) + 1) * cos((phy_rotation + 270) * (pi / 180)));
temp_y = y + (((sprite_height / 2) + 1) * sin((phy_rotation + 270) * (pi / 180)));

damage = 1;
power_drain = 1;

cooldown_time = 0;
firing_time = 0;

key_myKey[0] = vk_space;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (snd_temp != false)
    audio_stop_sound(snd_temp);
if (snd_hit != false)
    audio_stop_sound(snd_hit);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//counts firing time for weapon
image_index = 0;
laser_firing = false;
hitting_target = false;

if (snd_temp != false)
    audio_stop_sound(snd_temp);
if (snd_hit != false)
    audio_stop_sound(snd_hit);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//counts cooldown time for weapon
can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (laser_firing)
{
    // subtract from ship's power
    if global.ships[ship, 2] &gt;= power_drain
        global.ships[ship, 2] -= power_drain;
    else
        global.ships[ship, 2] = 0;
    
    // calculate laser position
    temp_x = phy_position_x + (((sprite_height / 2) + 1) * cos((phy_rotation + 270) * (pi / 180)));
    temp_y = phy_position_y + (((sprite_height / 2) + 1) * sin((phy_rotation + 270) * (pi / 180)));
    
    var laser_max = view_wport[0];
    if laser_max &lt; view_hport[0] laser_max = view_hport[0];
    
    var test_objs;
    test_objs[0] = obj_phy_object;
    test_objs[1] = obj_station;
    
    var obj_collided;
    obj_collided = draw_laser(temp_x, temp_y, (phy_rotation * -1) + 90, laser_max, test_objs, 1, 10);
        
    // damage target
    if ((collision_line(temp_x, temp_y, xx, yy, obj_phy_object, false, true)) || (collision_line(temp_x, temp_y, xx, yy, obj_station, true, true)))
    {
        if (collision_line(temp_x, temp_y, xx, yy, obj_phy_object, false, true))
        {
            if !hitting_target
            {
                if (snd_hit != false)
                    audio_stop_sound(snd_hit);
                snd_hit = audio_play_sound(snd_laser_hit, 1, true);
            }
            hitting_target = true;
            
            var obj;
            obj = collision_line(temp_x, temp_y, xx, yy, obj_phy_object, false, true);
            obj.hp-=damage;
    
            effect_create_above(ef_spark, xx, yy, 0, c_red);
        }
        else if (collision_line(temp_x, temp_y, xx, yy, obj_station, true, true))
        {
            if !hitting_target
            {
                if (snd_hit != false)
                    audio_stop_sound(snd_hit);
                snd_hit = audio_play_sound(snd_laser_hit, 1, true);
            }
            hitting_target = true;
            
            var obj;
            obj = collision_line(temp_x, temp_y, xx, yy, obj_station, true, true);
            obj.colliding = true;
            obj.fading = 10;
            obj.alarm[0] = 5;
    
            effect_create_above(ef_spark, xx, yy, 0, c_red);
        }
    }
    else
    {
        if (snd_hit != false)
            audio_stop_sound(snd_hit);
        hitting_target = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(key_myKey[0])
{
    scr_fire_laser();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if (laser_firing)
{
    var center_x = temp_x + ((1.5 * damage / 4) * cos((phy_rotation + 180) * (pi / 180)));;
    var center_y = temp_y + ((0.5 * damage / 4) * sin((phy_rotation + 180) * (pi / 180)));;
    
    draw_sprite_ext(spr_laser_beam, 0, center_x, center_y, point_distance(center_x,center_y,xx,yy)/4, (1.5 * damage)/4, (phy_rotation * -1) + 90 , c_red, .9);
    draw_sprite_ext(spr_laser_beam, 0, center_x, center_y, point_distance(center_x,center_y,xx,yy)/4, (0.5 * damage)/4, (phy_rotation * -1) + 90 , c_white, .9);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check(key_myKey[0])
{
    scr_stop_laser();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.150000005960464</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.5</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.400000005960464</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>32,16</point>
    <point>32,32</point>
    <point>0,32</point>
    <point>0,16</point>
  </PhysicsShapePoints>
</object>
