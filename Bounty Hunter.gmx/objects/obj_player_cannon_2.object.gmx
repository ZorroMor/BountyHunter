<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cannon_2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_cannon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

damaged_sprite = spr_cannon_2_damaged;

power_drain = .75;
ammo_drain = 3;
ammo_boost = 0.05;

cooldown_time = 25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if firing
{
    firing=false;

    var center_x, center_y, temp_x, temp_y;
 
    //cannon 1
    center_x = x + ((sprite_height / 7) * cos((phy_rotation + 0) * (pi / 180)));
    center_y = y + ((sprite_height / 7) * sin((phy_rotation + 0) * (pi / 180)));
    
    temp_x = center_x + (((sprite_height / 2) + 10) * cos((phy_rotation + 270) * (pi / 180)));
    temp_y = center_y + (((sprite_height / 2) + 10) * sin((phy_rotation + 270) * (pi / 180)));
    
    scr_fire_cannon(temp_x, temp_y);
    
    //cannon 2
    center_x = x + ((sprite_height / 7) * cos((phy_rotation + 180) * (pi / 180)));
    center_y = y + ((sprite_height / 7) * sin((phy_rotation + 180) * (pi / 180)));
    
    temp_x = center_x + (((sprite_height / 2) + 10) * cos((phy_rotation + 270) * (pi / 180)));
    temp_y = center_y + (((sprite_height / 2) + 10) * sin((phy_rotation + 270) * (pi / 180)));
    
    scr_fire_cannon(temp_x, temp_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.200000002980232</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.5</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.400000005960464</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,0</point>
    <point>24,0</point>
    <point>32,16</point>
    <point>32,32</point>
    <point>0,32</point>
    <point>0,16</point>
  </PhysicsShapePoints>
</object>
